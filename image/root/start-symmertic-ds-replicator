#!/bin/bash

set -e

function shut_down() {
    echo "Shutting down"
    kill -TERM $sym_pid 2>/dev/null
}

trap "shut_down" SIGKILL SIGTERM SIGHUP SIGINT EXIT

check_env_var () {
    if [ "x${!1}" = "x" ] ; then
        if [ $# = 2 ] ; then
            printf "$2\n\n"
        else
            printf "\n $1 is not defined! Define it with docker run -e $1=... \n\n"
        fi
        exit 1
    fi
}

# usage: parse_jdbc_url jdbc:mysql:://host[:port]/dbname... HOST PORT DBNAME
parse_jdbc_url () {
    local url=$1

    # default port
    if [[ $url == jdbc:mysql* ]] ; then
        port=3306
    elif [[ $url == jdbc:postgresql* ]] ; then
        port=5432
    else
        printf "\nUnknown jdbc url type: $url\n"
        exit 1
    fi

    # first, assume that we have jdbc:<dbtype>://user[:password]@db.host/...
    local host=`expr ${url} : '.*://.*@\([^:/]*\)'`
    local rest=`expr ${url} : '.*://.*@[^:/]*\(.*\)'`
    # no, we don't have a @ in the host part
    if [[ "$host" == "" ]] ; then
        host=`expr ${url} : '.*://\([^:/]*\)'`
        rest=`expr ${url} : '.*://[^:/]*\(.*\)'`
    fi

    # ':' indicates a port, otherwise we have a '/'
    if [[ $rest == :* ]] ; then
        port=`expr ${rest} : ':\([^/]*\)/.*'`
        dbname=`expr $rest : ':[^/]*/\([a-zA-Z_0-9-]*\).*'`
    else
        dbname=`expr $rest : '/\([a-zA-Z_0-9-]*\).*'`
    fi

    eval "$2=$host"
    eval "$3=$port"
    eval "$4=$dbname"
    return
}

check_env_var MASTER_JDBC "You MUST define the JDBC URL of the master DB with -e MASTER_JDBC=jdbc:mysql://..."
check_env_var MASTER_USER "You MUST define the user name of the master DB with '-e MASTER_USER=scott'.\n\nThe user needs permissions to create tables/triggers/procedures."
check_env_var MASTER_PASSWORD "You MUST define the password for user $MASTER_USER in master DB with -e MASTER_PASSWORD=tiger"

if [[ "x$MASTER_JDBC_DRIVER" == "x" ]] ; then
    if [[ $MASTER_JDBC == *mysql* ]] ; then
        MASTER_JDBC_DRIVER=com.mysql.jdbc.Driver
    elif [[ $MASTER_JDBC == *postgresql* ]] ; then
        MASTER_JDBC_DRIVER=org.postgresql.Driver
    else
        printf "\n\nUnknown MASTER_JDBC_DRIVER. Please specify it with '-e MASTER_JDBC_DRIVER=com.blabla.drivername'. Note that the driver should be supported by SymmetricDS\n\n"
        exit 1
    fi
fi

parse_jdbc_url $MASTER_JDBC MASTER_HOST MASTER_PORT MASTER_DBNAME

master_properties=/data/engines/${MASTER_ENGINE}-${MASTER_ID}.properties
# replace all / with \/
#sed -ie "s/db.url=.*/db.url=${MASTER_JDBC//\//\\\/}/" $master_properties
#sed -ie "s/db.user=.*/db.user=${MASTER_USER}/" $master_properties
#sed -ie "s/db.password=.*/db.password=${MASTER_PASSWORD}/" $master_properties
#sed -ie "s/db.driver=.*/db.driver=${MASTER_JDBC_DRIVER}/" $master_properties

check_env_var SLAVE_JDBC "You MUST define the JDBC URL of the slave DB with -e SLAVE_JDBC=jdbc:mysql://..."
check_env_var SLAVE_USER "You MUST define the user name of the slave DB with '-e SLAVE_USER=scott'.\n\nThe user needs permissions to create tables/triggers/procedures."
check_env_var SLAVE_PASSWORD "You MUST define the password for user $SLAVE_USER in slave DB with -e SLAVE_PASSWORD=tiger"

if [[ "x$SLAVE_JDBC_DRIVER" == "x" ]] ; then
    if [[ $SLAVE_JDBC == *mysql* ]] ; then
        SLAVE_JDBC_DRIVER=com.mysql.jdbc.Driver
    elif [[ $SLAVE_JDBC == *postgresql* ]] ; then
        SLAVE_JDBC_DRIVER=org.postgresql.Driver
    else
        printf "\n\nUnknown SLAVE_JDBC_DRIVER. Please specify it with '-e SLAVE_JDBC_DRIVER=com.blabla.drivername'. Note that the driver should be supported by SymmetricDS\n\n"
        exit 1
    fi
fi

parse_jdbc_url $SLAVE_JDBC SLAVE_HOST SLAVE_PORT SLAVE_DBNAME

slave_properties=/data/engines/master-000.properties
# replace all / with \/
#sed -ie "s/db.url=.*/db.url=${SLAVE_JDBC//\//\\\/}/" $slave_properties
#sed -ie "s/db.user=.*/db.user=${SLAVE_USER}/" $slave_properties
#sed -ie "s/db.password=.*/db.password=${SLAVE_PASSWORD}/" $slave_properties
#sed -ie "s/db.driver=.*/db.driver=${SLAVE_JDBC_DRIVER}/" $slave_properties

INIT_SQL_PATH=/data/tmp/init.sql

$JAVA_HOME/bin/java -Dfile.encoding=UTF-8 \
    -jar ${SYMMETRICDS_FOLDER}/${SYMMETRICDS_CONFIGURATOR_ARTIFACT} \
    -s /templates/ -f .*.vm -d /tmp/ -u $MASTER_JDBC -n $MASTER_USER -p $MASTER_PASSWORD

mv -f /tmp/master-000.properties $master_properties
mv -f /tmp/slave-001.properties $slave_properties
mv -f /tmp/init.sql $INIT_SQL_PATH

execute_master () {
    mysql --host=$MASTER_HOST --port=$MASTER_PORT --user=$MASTER_USER --password=$MASTER_PASSWORD --silent --disable-column-names -e "$@"
}

execute_slave () {
    mysql --host=$SLAVE_HOST --port=$SLAVE_PORT --user=$SLAVE_USER --password=$SLAVE_PASSWORD --silent --disable-column-names -e  "$@"
}

# turn off error checking temporarily as we expect some errors below
set +e

# verify the existence of the master DB
if [[ $(execute_master "show databases" | grep $MASTER_DBNAME) == $MASTER_DBNAME ]] ; then
    printf "Database $MASTER_DBNAME is present on master. Excellent.\n"
else
    printf "Database $MASTER_DBNAME is missing on master. Check the '-e MASTER_JDBC' setting (currently: $MASTER_JDBC)\n\n"
    exit 1
fi

# verify the existence of the Symmetric tables in the master DB
node_groups=$(execute_master "select node_group_id from $MASTER_DBNAME.sym_node_group")
if [ $? == 0 ] ; then
    printf "Database $MASTER_DBNAME contains the SymmetricDS tables. Very good.\n"
else
    printf "Database $MASTER_DBNAME doesn't have the SymmetricDS tables. I will add them ... "
    symadmin --engine ${MASTER_ENGINE}-${MASTER_ID} create-sym-tables
    printf "done.\n\n"
fi

if [ -z "$node_groups" ] ; then
    printf "Database $MASTER_DBNAME doesn't contain our sync configuration. I will import it from init.sql ... "
    dbimport --engine ${MASTER_ENGINE}-${MASTER_ID} $INIT_SQL_PATH
fi

# create the slave DB if not present and import a dump of the schema of master
if [[ $(execute_slave "show databases" | grep $SLAVE_DBNAME) == $SLAVE_DBNAME ]] ; then
    printf "Database $SLAVE_DBNAME is present on slave. Excellent.\n"
else
    printf "Database $SLAVE_DBNAME is missing on slave. I'm going to create it ... "
    execute_slave "create database $SLAVE_DBNAME"
    printf "done.\n\n"
    printf "I will dump the schema of the master DB ... "
    mysqldump --host=$MASTER_HOST --port=$MASTER_PORT --user=$MASTER_USER --password=$MASTER_PASSWORD --no-data --skip-triggers --skip-lock-tables $MASTER_DBNAME > /data/tmp/master_schema.sql
    printf "and import it in the slave DB ... "
    cat /data/tmp/master_schema.sql | mysql --host=$SLAVE_HOST --port=$SLAVE_PORT --user=$SLAVE_USER --password=$SLAVE_PASSWORD --database $SLAVE_DBNAME
    printf "finally remove the symmetric tables ..."
    execute_slave "set global foreign_key_checks=0" -D $SLAVE_DBNAME
    for t in $(execute_slave "select table_name from information_schema.tables where table_schema = 'master' and table_name like 'sym_%'") ; do
        execute_slave "drop table $t" -D $SLAVE_DBNAME
    done
    execute_slave "set global foreign_key_checks=1" -D $SLAVE_DBNAME
    # the self-reference in dic_node prevents correct loading
    execute_slave "alter table dic_node drop foreign key dic_node_ibfk_1" -D horreum
    execute_slave "alter table dicman_node drop foreign key dicman_node_ibfk_1" -D horreum
    printf "done\n\n"
fi

# turn on error checking again
set -e

echo "Starting SymmetricDS ..."
# start SymmetricDS and remember its PID
exec sym
sym_pid=$!

wait
